const { defaultResponse, firstMessage, senderName, getAutoGeneratedResponse, getUser } = data();
const {
    createResponseMessage,
    createMessage,
    appendMessage,
    makeMessageAsRead,
    makeMessageAsDelivered,
    renderTypingEffect,
    removeTypingEffect,
    hidePicture,
    getById } = utility();

const renderResponse = (message, inputValue) => {
    const response = getAutoGeneratedResponse(inputValue);
    const sender = getUser(response.sender);

    setTimeout(() => {
        makeMessageAsRead(message);
        renderTypingEffect(sender.name);
    }, 3000);

    setTimeout(() => {
        appendMessage(createResponseMessage({ sender, text: response.text }));
        if (--yetToReply == 0) removeTypingEffect();
    }, 4000);
}

const renderMessageSent = (text) => {
    const sender = getUser(currentUser.id);
    const message = createMessage({ sender, text });
    appendMessage(message);
    
    if (lastMessage) hidePicture(lastMessage);
    lastMessage = message;
    
    setTimeout(() => makeMessageAsDelivered(message), 2000);

    return message;
}

let yetToReply = 0;
let lastMessage = null;
const createAndAppendMessage = () => {
    const inputValue = getById('input-message').value;

    const message = renderMessageSent(inputValue);
    renderResponse(message, inputValue);
    
    yetToReply++;
};

const currentUserId = '0e82d2e3-bec8-4647-b0ea-e2004614ec5a';
const currentUser = getUser(currentUserId);

const chatView = getById('chat-view');
const sender = getUser(firstMessage.sender);
chatView.appendChild(createResponseMessage({ sender, text: firstMessage.text }));

setInterval(() => {
    renderTypingEffect(sender.name);

    setTimeout(() => {
        chatView.appendChild(
            createResponseMessage({
                sender,
                text: getAutoGeneratedResponse("response").text
            }));
            removeTypingEffect();
    }, 1000);

}, 10000);

getById('profile-brief-name').innerHTML = currentUser.name;
getById('profile-brief-image').src = currentUser.image;